:mod:`suite2p.utils`
====================

.. py:module:: suite2p.utils


Module Contents
---------------

.. function:: tic()


.. function:: toc(i0)


.. function:: fitMVGaus(y, x, lam, thres=2.5)

   computes 2D gaussian fit to data and returns ellipse of radius thres standard deviations.

   :param y: pixel locations in y
   :type y: float, array
   :param x: pixel locations in x
   :type x: float, array
   :param lam: weights of each pixel
   :type lam: float, array

   :returns: * **mu** (*float*) -- mean of gaussian fit.
             * **cov** (*float*) -- covariance of gaussian fit.
             * **radii** (*float, array*) -- half of major and minor axis lengths of elliptical fit.
             * **ellipse** (*float, array*) -- coordinates of elliptical fit.
             * **area** (*float*) -- area of ellipse.


.. function:: enhanced_mean_image(ops)

   computes enhanced mean image for GUI


.. function:: init_ops(ops)


.. function:: list_h5(ops)


.. function:: find_files_open_binaries(ops1, ish5)

   find tiffs or h5 files, and open binaries to write to
   inputs ops1 (list over planes), ish5 (whether or not h5)
   returns ops1, fs (filelist), reg_file, reg_file_chan2


.. function:: h5py_to_binary(ops)


.. function:: open_tiff(file, sktiff)

   opens tiff with either ScanImageTiffReader or skimage
   returns tiff and its length


.. function:: choose_tiff_reader(fs0, ops)


.. function:: tiff_to_binary(ops)

   converts tiff to *.bin file


.. function:: split_multiops(ops1)


.. function:: mesoscan_to_binary(ops)


.. function:: list_tifs(froot, look_one_level_down)

   list of tiffs in folder froot + one level down maybe


.. function:: get_tif_list(ops)

   make list of tiffs to process
   if ops['subfolders'], then all tiffs ops['data_path'][0] / ops['subfolders'] / *.tif
   if ops['look_one_level_down'], then all tiffs in all folders + one level down
   if ops['tiff_list'], then ops['data_path'][0] / ops['tiff_list'] ONLY


.. function:: sub2ind(array_shape, rows, cols)


.. function:: combined(ops1)

   Combines all the entries in ops1 into a single result file.
   Multi-plane recordings are arranged to best tile a square.
   Multi-roi recordings are arranged by their dx,dy physical localization.


.. function:: make_blocks(ops)


.. function:: sample_frames(ops, ix, reg_file)

   get frames ix from reg_file
   frames are cropped by ops['yrange'] and ops['xrange']


